{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Pilar's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/go-setup/","title":"Setting up a dev container for Go","text":"<ul> <li>Primary author: Pilar Chia</li> <li>Reviewer: Anya Vourakis</li> </ul>"},{"location":"tutorials/go-setup/#introduction","title":"Introduction","text":"<p>Welcome everyone! In this tutorial, you'll learn how to set up a development contaniner (dev container) for the Go programming language in Visual Studio Code (VS Code). Let's have some fun!</p>"},{"location":"tutorials/go-setup/#prerequisites","title":"Prerequisites","text":"<p>To start with this tutorial, you'll need to set up (if you haven't yet) the following:</p> <ol> <li>Your GitHub account: Log In or Sign Up</li> <li>Git: Run <code>git --version</code> in your terminal to confirm if you have it or download</li> <li>Visual Studio Code: Download here</li> <li>Docker: Download here</li> </ol> <p>Warning</p> <p>Do not move forward unless all these are downloaded and installed. </p>"},{"location":"tutorials/go-setup/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"tutorials/go-setup/#part-1-creating-the-repository","title":"Part 1. Creating the Repository","text":""},{"location":"tutorials/go-setup/#step-1-create-a-local-directory-and-initialize-git","title":"Step 1. Create a Local Directory and Initialize Git","text":"<p>(1) Open your terminal or command prompt.</p> <p>(2) Create a new directory for your project. </p> <p>Note</p> <p>If you'd like to organize this tutorial somewhere else on your machine, go ahead and change into that parent directory first.</p> <pre><code>mkdir go-setup-project\ncd go-setup-project\n</code></pre> <p>(3) Initialize a new Git repository:</p> <p><code>git init</code></p> <p>(4) Create a README file:</p> <pre><code>echo \"# Go Set Up Project from https://mchia157.github.io/comp423-course-notes/tutorials/go-setup/\" &gt; README.md\ngit add README.md\ngit commit -m \"Initial commit with README\"\n</code></pre>"},{"location":"tutorials/go-setup/#step-2-create-a-remote-repository-on-github","title":"Step 2. Create a Remote Repository on GitHub","text":"<p>(1) Log in to your GitHub account and navigate to the Create a New Repository page.</p> <p>(2) Fill in the details as follows:</p> <ul> <li>Repository Name: <code>go-setup-project</code></li> <li>Description: \"Tutorial to set up dev containers using Go programming language.\"</li> <li>Visibility: Public</li> </ul> <p>(3) Do not initialize the repository with a README, .gitignore, or license.</p> <p>(4) Click Create Repository.</p>"},{"location":"tutorials/go-setup/#step-3-link-your-local-repository-to-github","title":"Step 3. Link your Local Repository to GitHub","text":"<p>(1) Add the GitHub repository as a remote:</p> <pre><code>git remote add origin https://github.com/&lt;your-username&gt;/go-setup-project.git\n</code></pre> <p>Warning</p> <p>Make sure to replace <code>&lt;your-username&gt;</code> with your GitHub username.</p> <p>(2) Check your default branch name with the subcommand <code>git branch</code>. If it's not <code>main</code>, rename it to <code>main</code> with the following command: <pre><code>git branch -M main\n</code></pre></p> <p>Note</p> <p>Old versions of git choose the name master for the primary branch, but these days main is the standard primary branch name.</p> <p>(3) Push your local commits to the GitHub repository:</p> <pre><code>git push --set-upstream origin main\n</code></pre> <p>(4) Back in your web browser, refresh your GitHub repository to see that the same commit you made locally has now been pushed to remote. You can use git log locally to see the commit ID and message which should match the ID of the most recent commit on GitHub. This is the result of pushing your changes to your remote repository.</p>"},{"location":"tutorials/go-setup/#part-2-setting-up-the-development-environment","title":"Part 2. Setting Up the Development Environment","text":""},{"location":"tutorials/go-setup/#step-1-add-development-container-configuration","title":"Step 1. Add Development Container Configuration","text":"<ol> <li>In VS Code, open the <code>go-setup-project</code> directory. You can do this via: File &gt; Open Folder.</li> <li>Install the Dev Containers extension for VS Code.</li> <li>Create a .devcontainer directory in the root of your project with the following file inside of this \"hidden\" configuration directory: <code>.devcontainer/devcontainer.json</code></li> </ol> <p>The <code>devcontainer.json</code> file defines the configuration for your development environment. Here, we're specifying the following:</p> <ul> <li><code>name</code>: A descriptive name for your dev container.</li> <li><code>image</code>: The Docker image to use, in this case, the latest version of a Go environment. Microsoft maintains a collection of base images for many programming language environments, but you can also create your own!</li> <li><code>features</code>: Ensures Go is installed and up-to-date.</li> <li><code>customizations</code>: Installs the official Go plugin by the Go Team at Google. .devcontainer/devcontainer.json<pre><code>{\n  \"name\": \"Go Set Up Project\",\n  \"image\": \"mcr.microsoft.com/devcontainers/go:latest\",\n  \"features\": {\n    \"ghcr.io/devcontainers/features/go:1\": {\n      \"version\": \"latest\"\n    }\n  },\n  \"customizations\": {\n    \"vscode\": {\n      \"extensions\": [\n        \"golang.go\"\n      ]\n    }\n  }\n}\n</code></pre></li> </ul>"},{"location":"tutorials/go-setup/#step-2-reopen-the-project-in-a-vscode-dev-container","title":"Step 2. Reopen the Project in a VSCode Dev Container","text":"<p>Reopen the project in the container by pressing <code>Ctrl+Shift+P</code> (or <code>Cmd+Shift+P</code> on Mac), typing \"Dev Containers: Reopen in Container,\" and selecting the option. This may take a few minutes while the image is downloaded and the requirements are installed.</p> <p>Once your dev container setup completes, close the current terminal tab (trash can), open a new terminal pane within VSCode, and try running <code>go version</code> to see your dev container is running a recent version of Go.</p>"},{"location":"tutorials/go-setup/#part-3-creating-a-new-go-project","title":"Part 3. Creating a new Go project","text":""},{"location":"tutorials/go-setup/#step-1-initialize-a-go-module","title":"Step 1. Initialize a Go module","text":"<pre><code>go mod init hello-world\n</code></pre>"},{"location":"tutorials/go-setup/#step-2-create-a-new-go-file","title":"Step 2. Create a new Go file","text":"<p>By convention, you'll call the file <code>main.go</code></p> main.go<pre><code>package main\n\nimport \"fmt\"\n\nfunc main(){\n  fmt.Println(\"Hello COMP423\")\n}\n</code></pre>"},{"location":"tutorials/go-setup/#step-4-run-the-program","title":"Step 4. Run the program","text":"<pre><code>go run main.go\n</code></pre> <p>Note</p> <p>The subcommand run compiles and runs the code in one step, but does not create a standalone executable.</p>"},{"location":"tutorials/go-setup/#step-4-create-an-executable-file-named-hello-world","title":"Step 4. Create an executable file named <code>hello-world</code>","text":"<pre><code>go build -o hello-world main.go\n</code></pre> <p>Info</p> <p><code>-o hello-world</code> indicates the excecutable is written to the hello-world output file.</p> <p>Note</p> <p>The subcommand build compiles the code and generates a standalone executable, so the program can be run without installing go.</p>"},{"location":"tutorials/go-setup/#step-5-add-commit-and-push-your-work","title":"Step 5. Add, commit, and push your work","text":"<p>Write the following on your terminal:</p> <pre><code>git add .\ngit commit -m \"Created my first Go project\"\ngit push origin main\n</code></pre>"},{"location":"tutorials/go-setup/#conclusion","title":"Conclusion","text":"<p>Congratulations! You've successfully created a dev container using VS Code for Go development and completed your first project.</p>"}]}